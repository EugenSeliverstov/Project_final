import pytest
import requests


   # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
@pytest.mark.usefixtures("message_id")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ

def test_get_message(base_url, channel_id, headers, message_id):
    url = f"{base_url}/channels/{channel_id}/messages/{message_id}"
    response = requests.get(url, headers=headers)
    assert response.status_code == 200
    assert response.headers['Content-Type'] == 'application/json'
    assert response.json().get('id') == str(message_id)
    # print("–°–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + response.json()['content'])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def test_get_messages_list(base_url, channel_id, headers, message_id):
    url = f"{base_url}/channels/{channel_id}/messages"
    params = {
        "limit": 5
    }
    response = requests.get(url, headers=headers, params=params)
    assert response.status_code == 200
    assert response.headers['Content-Type'] == 'application/json'
    messages_list = response.json()
    assert isinstance(messages_list, list)
    assert len(messages_list) != 0


    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
def test_message_with_attachment(base_url, channel_id, headers):
    url = f"{base_url}/channels/{channel_id}/messages"
    files = {
        'files[0]': ('test_image.png', open('test_image.png', 'rb'))
    }

    data = {
        'content': "Alpine skiing!!!"
    }

    # –£–¥–∞–ª–µ–Ω–∏–µ Content-Type
    headers.pop('Content-Type', None)
    response = requests.post(url, headers=headers, files=files, data=data)
    assert response.status_code == 200
    message_id = response.json().get('id')
    assert message_id != 0
    assert 'attachments' in response.json()


    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def test_mentioned_user(base_url, channel_id, headers):
    url = f"{base_url}/channels/{channel_id}/messages"
    mentioned_user_id = "1184822550052741220"
    data = {
        "content": f"New car, caviar, four-star day dream...<@{mentioned_user_id}>"
    }
    response = requests.post(url, headers=headers, json=data)
    assert response.status_code == 200
    assert response.headers['Content-Type'] == 'application/json'
    assert response.json()["mentions"][0]["id"] == mentioned_user_id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ–µ
def test_add_reaction(base_url, channel_id, headers, message_id):
    emoji = "‚ò†Ô∏è"
    emoji_encoded = requests.utils.quote(emoji)
    url = f"{base_url}/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
    add_reaction = requests.put(url, headers=headers)
    assert add_reaction.status_code == 204

    remove_reaction_url = f"{base_url}/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
    delete_reaction = requests.delete(remove_reaction_url, headers=headers)
    assert delete_reaction.status_code == 204


  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_invalid_message(base_url, channel_id, headers):
    url = f"{base_url}/channels/{channel_id}/messages"
    data = {
        "content": "       "
    }
    response = requests.post(url, headers=headers, json=data)
    assert response.status_code == 400
    assert response.json()["message"] == "Cannot send an empty message"


    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Id
def test_non_existing_id_message(base_url, channel_id, headers):
    invalid_message_id = "666"
    url = f"{base_url}/channels/{channel_id}/messages/{invalid_message_id}"
    response = requests.get(url, headers=headers)
    assert response.status_code == 404
    assert response.json()["message"] == "Unknown Message"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def test_add_reaction_to_non_existing_message(base_url, channel_id, headers):
    invalid_message_id = "666"
    emoji = "üëπ"
    emoji_encoded = requests.utils.quote(emoji)
    url = f"{base_url}/channels/{channel_id}/messages/{invalid_message_id}/reactions/{emoji_encoded}/@me"
    response = requests.put(url, headers=headers)
    assert response.status_code == 404
    assert response.json()["message"] == "Unknown Message"